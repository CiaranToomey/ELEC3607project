// interrupt variables
volatile int IRled = 0;
volatile int WIFIdata = 0;
volatile int Water = 0;



/* UART FSM States */
typedef enum
{
  IDLE = 0U,
  START,
  RUN,
  INTERRUPT
} UART_State_t;


UART_State_t txState = IDLE; // State register


/* FSM state transition */
void uart_state_machine()
{
  switch (txState)
  {
    case START:
      // Process map 
      // set PWM and Pump rate
      txState = RUN;
      break;
    case RUN:
    // prints duty 
    Serial.println((int)((double)(LEFT_MOTOR_RA*100)/RC_clk)+1);

    delay(100);
    break;
    
    case INTERRUPT:
      txState = RUN;
      if (IRled == 1) {
         IRledHandler();
         IRled = 0;
      }
      if (WIFIdata == 1) {
        WIFIdataHandler();
        WIFIdata = 0;
      }
      if (Water == 1) {
        WaterHandler();
        Water = 0;
      }
      break;
    
    case IDLE:
      delay(100);
      break;
    default:
      break;
  }
}


void IRledHandler() {
  // send signal over wifi
  Serial.println("IR led handler triggered!");
  txState = IDLE;
}
void WIFIdataHandler() {

  if(Serial1.available()) {
        int count = 0;
        char command [2];
        char number [] = {0,0};
        int val = 0;
        while(Serial1.available() > 0) { 
          if (count == 0) {
            command[0] = (char)Serial1.read();
          } 
          if (count == 1) {
            command[1] = (char)Serial1.read();
          }
          if (count > 2) {
            number[count-3] = (int)Serial1.read();
          }
          count++;
        }
        val = atoi(number);


        if ((String)command == "DC") {
          txState = RUN;
          start_motors(val,2);
        }
        if ((String)command == "ST") {
          stop_motors();
        }
        if ((String)command == "TR") {
          turn_right();
        }
        if ((String)command == "TL") {
          turn_left();
        }
        
        
      }
      delay(100);
  txState = RUN;
}
void WaterHandler() {
  
  Serial.println("WATER LEVEL LOW!");
  txState = IDLE;
  
}


void ISR_func_IRled() {
  IRled = 1;
  txState = INTERRUPT;
}
void ISR_func_WIFIdata() {
  WIFIdata = 1;
  txState = INTERRUPT;
}
void ISR_func_Water() {
  Water = 1;
  txState = INTERRUPT;
}
void setup() {
  
  Serial.begin(115200);
  Serial1.begin(115200);
  // setup of pins for interrupts 
  pinMode(26, INPUT);
  pinMode(32,INPUT);
  pinMode(38,INPUT);
  
  attachInterrupt(26, ISR_func_IRled, RISING);
  attachInterrupt(38, ISR_func_WIFIdata, RISING);
  attachInterrupt(32, ISR_func_Water, FALLING);


}


void loop() {
  uart_state_machine();
}
